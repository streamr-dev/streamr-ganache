{
  "contractName": "Marketplace",
  "sourcePath": "https://github.com/streamr-dev/marketplace-contracts/blob/master/contracts/Marketplace.sol",
  "compiler": {
    "name": "solc",
    "version": "0.4.25+commit.59dbf8f1.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "2.0.2",
  "updatedAt": "2020-01-31T08:25:34.730Z",
  "abi": [
    {
      "constant": false,
      "inputs": [],
      "name": "claimOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "products",
      "outputs": [
        {
          "name": "id",
          "type": "bytes32"
        },
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "owner",
          "type": "address"
        },
        {
          "name": "beneficiary",
          "type": "address"
        },
        {
          "name": "pricePerSecond",
          "type": "uint256"
        },
        {
          "name": "priceCurrency",
          "type": "uint8"
        },
        {
          "name": "minimumSubscriptionSeconds",
          "type": "uint256"
        },
        {
          "name": "state",
          "type": "uint8"
        },
        {
          "name": "newOwnerCandidate",
          "type": "address"
        },
        {
          "name": "requiresWhitelist",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "datacoin",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "currencyUpdateAgent",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "halted",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "dataPerUsd",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "name": "datacoinAddress",
          "type": "address"
        },
        {
          "name": "currencyUpdateAgentAddress",
          "type": "address"
        },
        {
          "name": "prev_marketplace_address",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "pricePerSecond",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "currency",
          "type": "uint8"
        },
        {
          "indexed": false,
          "name": "minimumSubscriptionSeconds",
          "type": "uint256"
        }
      ],
      "name": "ProductCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "pricePerSecond",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "currency",
          "type": "uint8"
        },
        {
          "indexed": false,
          "name": "minimumSubscriptionSeconds",
          "type": "uint256"
        }
      ],
      "name": "ProductUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "pricePerSecond",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "currency",
          "type": "uint8"
        },
        {
          "indexed": false,
          "name": "minimumSubscriptionSeconds",
          "type": "uint256"
        }
      ],
      "name": "ProductDeleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "pricePerSecond",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "currency",
          "type": "uint8"
        },
        {
          "indexed": false,
          "name": "minimumSubscriptionSeconds",
          "type": "uint256"
        }
      ],
      "name": "ProductImported",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "pricePerSecond",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "currency",
          "type": "uint8"
        },
        {
          "indexed": false,
          "name": "minimumSubscriptionSeconds",
          "type": "uint256"
        }
      ],
      "name": "ProductRedeployed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "name": "to",
          "type": "address"
        }
      ],
      "name": "ProductOwnershipOffered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "newOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "id",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "name": "oldOwner",
          "type": "address"
        }
      ],
      "name": "ProductOwnershipChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "productId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "name": "subscriber",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "endTimestamp",
          "type": "uint256"
        }
      ],
      "name": "Subscribed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "productId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "name": "subscriber",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "endTimestamp",
          "type": "uint256"
        }
      ],
      "name": "NewSubscription",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "productId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "name": "subscriber",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "endTimestamp",
          "type": "uint256"
        }
      ],
      "name": "SubscriptionExtended",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "productId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "name": "subscriber",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "endTimestamp",
          "type": "uint256"
        }
      ],
      "name": "SubscriptionImported",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "productId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "secondsTransferred",
          "type": "uint256"
        }
      ],
      "name": "SubscriptionTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "dataInUsd",
          "type": "uint256"
        }
      ],
      "name": "ExchangeRatesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "productId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "name": "subscriber",
          "type": "address"
        }
      ],
      "name": "WhitelistRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "productId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "name": "subscriber",
          "type": "address"
        }
      ],
      "name": "WhitelistApproved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "productId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "name": "subscriber",
          "type": "address"
        }
      ],
      "name": "WhitelistRejected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "productId",
          "type": "bytes32"
        }
      ],
      "name": "WhitelistEnabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "productId",
          "type": "bytes32"
        }
      ],
      "name": "WhitelistDisabled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "Halted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "Resumed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "getProduct",
      "outputs": [
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "owner",
          "type": "address"
        },
        {
          "name": "beneficiary",
          "type": "address"
        },
        {
          "name": "pricePerSecond",
          "type": "uint256"
        },
        {
          "name": "currency",
          "type": "uint8"
        },
        {
          "name": "minimumSubscriptionSeconds",
          "type": "uint256"
        },
        {
          "name": "state",
          "type": "uint8"
        },
        {
          "name": "requiresWhitelist",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "id",
          "type": "bytes32"
        },
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "beneficiary",
          "type": "address"
        },
        {
          "name": "pricePerSecond",
          "type": "uint256"
        },
        {
          "name": "currency",
          "type": "uint8"
        },
        {
          "name": "minimumSubscriptionSeconds",
          "type": "uint256"
        }
      ],
      "name": "createProduct",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "id",
          "type": "bytes32"
        },
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "beneficiary",
          "type": "address"
        },
        {
          "name": "pricePerSecond",
          "type": "uint256"
        },
        {
          "name": "currency",
          "type": "uint8"
        },
        {
          "name": "minimumSubscriptionSeconds",
          "type": "uint256"
        }
      ],
      "name": "createProductWithWhitelist",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "productId",
          "type": "bytes32"
        }
      ],
      "name": "deleteProduct",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "productId",
          "type": "bytes32"
        }
      ],
      "name": "redeployProduct",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "productId",
          "type": "bytes32"
        },
        {
          "name": "name",
          "type": "string"
        },
        {
          "name": "beneficiary",
          "type": "address"
        },
        {
          "name": "pricePerSecond",
          "type": "uint256"
        },
        {
          "name": "currency",
          "type": "uint8"
        },
        {
          "name": "minimumSubscriptionSeconds",
          "type": "uint256"
        }
      ],
      "name": "updateProduct",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "productId",
          "type": "bytes32"
        },
        {
          "name": "newOwnerCandidate",
          "type": "address"
        }
      ],
      "name": "offerProductOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "productId",
          "type": "bytes32"
        }
      ],
      "name": "claimProductOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "productId",
          "type": "bytes32"
        },
        {
          "name": "subscriber",
          "type": "address"
        }
      ],
      "name": "getSubscription",
      "outputs": [
        {
          "name": "isValid",
          "type": "bool"
        },
        {
          "name": "endTimestamp",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "productId",
          "type": "bytes32"
        }
      ],
      "name": "getSubscriptionTo",
      "outputs": [
        {
          "name": "isValid",
          "type": "bool"
        },
        {
          "name": "endTimestamp",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "productId",
          "type": "bytes32"
        },
        {
          "name": "subscriber",
          "type": "address"
        }
      ],
      "name": "hasValidSubscription",
      "outputs": [
        {
          "name": "isValid",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "productId",
          "type": "bytes32"
        },
        {
          "name": "subscriptionSeconds",
          "type": "uint256"
        },
        {
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "grantSubscription",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "productId",
          "type": "bytes32"
        },
        {
          "name": "subscriptionSeconds",
          "type": "uint256"
        },
        {
          "name": "recipient",
          "type": "address"
        }
      ],
      "name": "buyFor",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "productId",
          "type": "bytes32"
        },
        {
          "name": "subscriptionSeconds",
          "type": "uint256"
        }
      ],
      "name": "buy",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "name": "dataUsd",
          "type": "uint256"
        }
      ],
      "name": "updateExchangeRates",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "subscriptionSeconds",
          "type": "uint256"
        },
        {
          "name": "price",
          "type": "uint256"
        },
        {
          "name": "unit",
          "type": "uint8"
        }
      ],
      "name": "getPriceInData",
      "outputs": [
        {
          "name": "datacoinAmount",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "halt",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "resume",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "datacoinAddress",
          "type": "address"
        },
        {
          "name": "currencyUpdateAgentAddress",
          "type": "address"
        },
        {
          "name": "prev_marketplace_address",
          "type": "address"
        }
      ],
      "name": "reInitialize",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "productId",
          "type": "bytes32"
        },
        {
          "name": "_requiresWhitelist",
          "type": "bool"
        }
      ],
      "name": "setRequiresWhitelist",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "productId",
          "type": "bytes32"
        },
        {
          "name": "subscriber",
          "type": "address"
        }
      ],
      "name": "whitelistApprove",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "productId",
          "type": "bytes32"
        },
        {
          "name": "subscriber",
          "type": "address"
        }
      ],
      "name": "whitelistReject",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "productId",
          "type": "bytes32"
        }
      ],
      "name": "whitelistRequest",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "productId",
          "type": "bytes32"
        },
        {
          "name": "subscriber",
          "type": "address"
        }
      ],
      "name": "getWhitelistState",
      "outputs": [
        {
          "name": "wlstate",
          "type": "uint8"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106101a05763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630398751281146101a5578063046f7da2146101ce5780630ddeb632146101e35780631a464fa1146101fe5780631f4e09af1461021657806325cc3a201461023d5780633a20e9df146102615780634a54fb0a146103665780634d8a9499146103e15780634e71e0c81461040557806353f81ef81461041a57806357fa3db71461044d57806358f816bf146104955780635ed7ca5b146104ad5780635f28cb74146104c2578063683ec0a7146104e6578063790543911461056157806379c88f201461067257806389aaad29146106a35780638da5cb5b146106b857806394727b41146106cd57806396002aef146106e5578063a4b138b014610709578063b14f843214610736578063b9b8af0b1461076e578063bee7d43314610783578063cafbc49d146107b6578063d50a04f414610831578063db6c709c14610846578063de22732414610861578063e0d5b9e11461087e578063e30c397814610896578063f2fde38b146108ab575b600080fd5b3480156101b157600080fd5b506101cc600435602435600160a060020a03604435166108cc565b005b3480156101da57600080fd5b506101cc61093e565b3480156101ef57600080fd5b506101cc6004356024356109c3565b34801561020a57600080fd5b506101cc600435610a32565b34801561022257600080fd5b506101cc600435602435600160a060020a0360443516610b8a565b34801561024957600080fd5b506101cc600435600160a060020a0360243516610cca565b34801561026d57600080fd5b50610279600435610eb1565b604051808060200189600160a060020a0316600160a060020a0316815260200188600160a060020a0316600160a060020a031681526020018781526020018660018111156102c357fe5b60ff1681526020018581526020018460018111156102dd57fe5b60ff1681526020018315151515815260200182810382528a818151815260200191508051906020019080838360005b8381101561032457818101518382015260200161030c565b50505050905090810190601f1680156103515780820380516001836020036101000a031916815260200191505b50995050505050505050505060405180910390f35b34801561037257600080fd5b5060408051602060046024803582810135601f81018590048502860185019096528585526101cc95833595369560449491939091019190819084018382808284375094975050508335600160a060020a031694505050602082013591604081013560ff16915060600135611004565b3480156103ed57600080fd5b506101cc600435600160a060020a0360243516611294565b34801561041157600080fd5b506101cc61147b565b34801561042657600080fd5b50610432600435611541565b60408051921515835260208301919091528051918290030190f35b34801561045957600080fd5b50610471600435600160a060020a0360243516611557565b6040518082600381111561048157fe5b60ff16815260200191505060405180910390f35b3480156104a157600080fd5b506101cc6004356115f2565b3480156104b957600080fd5b506101cc611871565b3480156104ce57600080fd5b50610432600435600160a060020a03602435166118f9565b3480156104f257600080fd5b5060408051602060046024803582810135601f81018590048502860185019096528585526101cc95833595369560449491939091019190819084018382808284375094975050508335600160a060020a031694505050602082013591604081013560ff16915060600135611b50565b34801561056d57600080fd5b50610579600435611bf3565b604080518b8152600160a060020a03808b16928201929092529088166060820152608081018790526020810160a082018760018111156105b557fe5b60ff1681526020018681526020018560018111156105cf57fe5b60ff16815260200184600160a060020a0316600160a060020a031681526020018315151515815260200182810382528b818151815260200191508051906020019080838360005b8381101561062e578181015183820152602001610616565b50505050905090810190601f16801561065b5780820380516001836020036101000a031916815260200191505b509b50505050505050505050505060405180910390f35b34801561067e57600080fd5b50610687611ce7565b60408051600160a060020a039092168252519081900360200190f35b3480156106af57600080fd5b50610687611cf6565b3480156106c457600080fd5b50610687611d05565b3480156106d957600080fd5b506101cc600435611d14565b3480156106f157600080fd5b506101cc600435600160a060020a0360243516611ef1565b34801561071557600080fd5b506101cc600160a060020a0360043581169060243581169060443516612045565b34801561074257600080fd5b5061075a600435600160a060020a03602435166120a0565b604080519115158252519081900360200190f35b34801561077a57600080fd5b5061075a6120b4565b34801561078f57600080fd5b506107a460043560243560ff604435166120bd565b60408051918252519081900360200190f35b3480156107c257600080fd5b5060408051602060046024803582810135601f81018590048502860185019096528585526101cc95833595369560449491939091019190819084018382808284375094975050508335600160a060020a031694505050602082013591604081013560ff16915060600135612130565b34801561083d57600080fd5b506107a46121a8565b34801561085257600080fd5b506101cc6004356024356121ae565b34801561086d57600080fd5b506101cc6004356024351515612261565b34801561088a57600080fd5b506101cc600435612428565b3480156108a257600080fd5b506106876125d0565b3480156108b757600080fd5b506101cc600160a060020a03600435166125df565b60075460ff1615806108e85750600054600160a060020a031633145b151561092c576040805160e560020a62461bcd02815260206004820152600c60248201526000805160206137c4833981519152604482015290519081900360640190fd5b6109398383836001612651565b505050565b600054600160a060020a0316331461098e576040805160e560020a62461bcd0281526020600482015260096024820152600080516020613804833981519152604482015290519081900360640190fd5b6007805460ff191690556040517f62451d457bc659158be6e6247f56ec1df424a5c7597f71c20c2bc44e0965c8f990600090a1565b60075460ff1615806109df5750600054600160a060020a031633145b1515610a23576040805160e560020a62461bcd02815260206004820152600c60248201526000805160206137c4833981519152604482015290519081900360640190fd5b610a2e8282336108cc565b5050565b60075460009060ff161580610a515750600054600160a060020a031633145b1515610a95576040805160e560020a62461bcd02815260206004820152600c60248201526000805160206137c4833981519152604482015290519081900360640190fd5b610a9e82612af4565b5050600081815260056020526040902060078101546101009004600160a060020a03163314610b17576040805160e560020a62461bcd02815260206004820152601260248201527f6572726f725f6e6f745065726d69747465640000000000000000000000000000604482015290519081900360640190fd5b6002810154604051600160a060020a0390911690839033907eaf27297c740fbece798135b71b06164310e0591b6c729e50b8026dcc60be5090600090a4600281018054600160a060020a03191633179055600701805474ffffffffffffffffffffffffffffffffffffffff001916905550565b60075460ff161580610ba65750600054600160a060020a031633145b1515610bea576040805160e560020a62461bcd02815260206004820152600c60248201526000805160206137c4833981519152604482015290519081900360640190fd5b826000610bf682610eb1565b50505050505091505080600160a060020a0316600014151515610c51576040805160e560020a62461bcd02815260206004820152600e60248201526000805160206137e4833981519152604482015290519081900360640190fd5b600160a060020a038116331480610c725750600054600160a060020a031633145b1515610cb6576040805160e560020a62461bcd02815260206004820152601760248201526000805160206137a4833981519152604482015290519081900360640190fd5b610cc38585856000612651565b5050505050565b6000826000610cd882610eb1565b50505050505091505080600160a060020a0316600014151515610d33576040805160e560020a62461bcd02815260206004820152600e60248201526000805160206137e4833981519152604482015290519081900360640190fd5b600160a060020a038116331480610d545750600054600160a060020a031633145b1515610d98576040805160e560020a62461bcd02815260206004820152601760248201526000805160206137a4833981519152604482015290519081900360640190fd5b610da185612af4565b50600085815260056020526040902080549093501515610df9576040805160e560020a62461bcd02815260206004820152600e60248201526000805160206137e4833981519152604482015290519081900360640190fd5b600783015460a860020a900460ff161515610e5e576040805160e560020a62461bcd02815260206004820152601960248201527f6572726f725f77686974656c6973744e6f74456e61626c656400000000000000604482015290519081900360640190fd5b600160a060020a0384166000818152600985016020526040808220805460ff191660021790555187917f391da9ecb91abda3886c59d98ecdb8fa7154c525b5c6a575ef67cef1f5a8d85491a35050505050565b60606000806000806000806000610ec789612e36565b969e50949c50929a509098509650945092509050600160a060020a03871615610eef57610ff9565b600480546040805160e060020a633a20e9df0281529283018c905251600160a060020a0390911691633a20e9df91602480830192600092919082900301818387803b158015610f3d57600080fd5b505af1158015610f51573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260e0811015610f7a57600080fd5b810190808051640100000000811115610f9257600080fd5b82016020810184811115610fa557600080fd5b8151640100000000811182820187101715610fbf57600080fd5b5050602082015160408301516060840151608085015160a086015160c090960151949f50929d50909b509950975090955093506000925050505b919395975091939597565b600086600061101282610eb1565b50505050505091505080600160a060020a031660001415151561106d576040805160e560020a62461bcd02815260206004820152600e60248201526000805160206137e4833981519152604482015290519081900360640190fd5b600160a060020a03811633148061108e5750600054600160a060020a031633145b15156110d2576040805160e560020a62461bcd02815260206004820152601760248201526000805160206137a4833981519152604482015290519081900360640190fd5b6000861161112a576040805160e560020a62461bcd02815260206004820152601e60248201527f6572726f725f6672656550726f64756374734e6f74537570706f727465640000604482015290519081900360640190fd5b61113389612af4565b506000898152600560209081526040909120895190945061115c916001860191908b01906136a2565b50600383018054600160a060020a031916600160a060020a0389161790556004830186905560058301805486919060ff19166001838181111561119b57fe5b0217905550600683018490558254600284015460408051600160a060020a038b811660208301529181018a90529116907f21953ef62f6c172d864b9ae2181d3c7114ef506c3546057e354cf6b5bab03ec4908b908b908b908b908b90806060810184600181111561120857fe5b60ff168152602001838152602001828103825287818151815260200191508051906020019080838360005b8381101561124b578181015183820152602001611233565b50505050905090810190601f1680156112785780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390a3505050505050505050565b60008260006112a282610eb1565b50505050505091505080600160a060020a03166000141515156112fd576040805160e560020a62461bcd02815260206004820152600e60248201526000805160206137e4833981519152604482015290519081900360640190fd5b600160a060020a03811633148061131e5750600054600160a060020a031633145b1515611362576040805160e560020a62461bcd02815260206004820152601760248201526000805160206137a4833981519152604482015290519081900360640190fd5b61136b85612af4565b506000858152600560205260409020805490935015156113c3576040805160e560020a62461bcd02815260206004820152600e60248201526000805160206137e4833981519152604482015290519081900360640190fd5b600783015460a860020a900460ff161515611428576040805160e560020a62461bcd02815260206004820152601960248201527f6572726f725f77686974656c6973744e6f74456e61626c656400000000000000604482015290519081900360640190fd5b600160a060020a0384166000818152600985016020526040808220805460ff191660031790555187917f71195ce6244a4b5ea0742ce64ede6bac9a2111edb4e732886198ff6ecf58651c91a35050505050565b600154600160a060020a031633146114dd576040805160e560020a62461bcd02815260206004820152601060248201527f6f6e6c7950656e64696e674f776e657200000000000000000000000000000000604482015290519081900360640190fd5b60015460008054604051600160a060020a0393841693909116917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36001805460008054600160a060020a0319908116600160a060020a03841617909155169055565b60008061154e83336118f9565b91509150915091565b600080600061156585610eb1565b50505050505092505081600160a060020a03166000141515156115c0576040805160e560020a62461bcd02815260206004820152600e60248201526000805160206137e4833981519152604482015290519081900360640190fd5b5050506000918252600560209081526040808420600160a060020a039390931684526009909201905290205460ff1690565b600081600061160082610eb1565b50505050505091505080600160a060020a031660001415151561165b576040805160e560020a62461bcd02815260206004820152600e60248201526000805160206137e4833981519152604482015290519081900360640190fd5b600160a060020a03811633148061167c5750600054600160a060020a031633145b15156116c0576040805160e560020a62461bcd02815260206004820152601760248201526000805160206137a4833981519152604482015290519081900360640190fd5b6116c984612af4565b5060008481526005602052604081209350600784015460ff1660018111156116ed57fe5b14611742576040805160e560020a62461bcd02815260206004820152601760248201527f6572726f725f6d75737442654e6f744465706c6f796564000000000000000000604482015290519081900360640190fd5b60078301805460ff191660019081179091556002840154600385015460048601546005870154600688015460408051600160a060020a03958616602082018190529181018590528b9795909616957f07ace6911e28d0d5b2e773ce49cdfa29db157b38bffccd5f0b56f02cfba8a64f95808c01959294929360ff9093169291908190606082019085908111156117d457fe5b60ff16815260208101849052604083820381018352885460026001821615610100026000190190911604908201819052606090910190889080156118595780601f1061182e57610100808354040283529160200191611859565b820191906000526020600020905b81548152906001019060200180831161183c57829003601f168201915b5050965050505050505060405180910390a350505050565b600054600160a060020a031633146118c1576040805160e560020a62461bcd0281526020600482015260096024820152600080516020613804833981519152604482015290519081900360640190fd5b6007805460ff191660011790556040517f1ee9080f6b55ca44ce58681c8162e6c1ac1c47e1da791a4a1c1ec6186d8af1f390600090a1565b600080600080600061190a87612e36565b50505050505093505082600160a060020a0316600014156119cb5760048054604080517f5f28cb740000000000000000000000000000000000000000000000000000000081529283018a9052600160a060020a0389811660248501528151921692635f28cb7492604480830193928290030181600087803b15801561198e57600080fd5b505af11580156119a2573d6000803e3d6000fd5b505050506040513d60408110156119b857600080fd5b5080516020909101519095509350611b46565b6119d58787613019565b805490935015159050611b3557600480546040805160e060020a633a20e9df0281529283018a905251600160a060020a0390911691633a20e9df91602480830192600092919082900301818387803b158015611a3057600080fd5b505af1158015611a44573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260e0811015611a6d57600080fd5b810190808051640100000000811115611a8557600080fd5b82016020810184811115611a9857600080fd5b8151640100000000811182820187101715611ab257600080fd5b5050506020015192505050600160a060020a03811615611b355760048054604080517f5f28cb740000000000000000000000000000000000000000000000000000000081529283018a9052600160a060020a0389811660248501528151921692635f28cb7492604480830193928290030181600087803b15801561198e57600080fd5b611b3e82613093565b825490955093505b5050509250929050565b60075460ff161580611b6c5750600054600160a060020a031633145b1515611bb0576040805160e560020a62461bcd02815260206004820152600c60248201526000805160206137c4833981519152604482015290519081900360640190fd5b611bc0868686868686600161309a565b60405186907f507847149b655f0d87f5cadd67619cd1c0a53b2cbb153d2f08f83614b4c29b7890600090a2505050505050565b6005602090815260009182526040918290208054600180830180548651600293821615610100026000190190911692909204601f810186900486028301860190965285825291949293909290830182828015611c905780601f10611c6557610100808354040283529160200191611c90565b820191906000526020600020905b815481529060010190602001808311611c7357829003601f168201915b505050600284015460038501546004860154600587015460068801546007909801549697600160a060020a0394851697938516965091945060ff908116939192808216926101008204169160a860020a909104168a565b600254600160a060020a031681565b600354600160a060020a031681565b600054600160a060020a031681565b6000816000611d2282610eb1565b50505050505091505080600160a060020a0316600014151515611d7d576040805160e560020a62461bcd02815260206004820152600e60248201526000805160206137e4833981519152604482015290519081900360640190fd5b600160a060020a038116331480611d9e5750600054600160a060020a031633145b1515611de2576040805160e560020a62461bcd02815260206004820152601760248201526000805160206137a4833981519152604482015290519081900360640190fd5b611deb84612af4565b50600084815260056020526040902092506001600784015460ff166001811115611e1157fe5b14611e66576040805160e560020a62461bcd02815260206004820152601160248201527f6572726f725f6e6f744465706c6f796564000000000000000000000000000000604482015290519081900360640190fd5b60078301805460ff191690556002830154600384015460048501546005860154600687015460408051600160a060020a03958616602082018190529181018590528a9695909516947ffc64345d61f75f77f5039b0e23107d4abd73ecb7cd6c94fd44e8a6dd85918f6a946001808c01959394919360ff1692908190606082019085908111156117d457fe5b816000611efd82610eb1565b50505050505091505080600160a060020a0316600014151515611f58576040805160e560020a62461bcd02815260206004820152600e60248201526000805160206137e4833981519152604482015290519081900360640190fd5b600160a060020a038116331480611f795750600054600160a060020a031633145b1515611fbd576040805160e560020a62461bcd02815260206004820152601760248201526000805160206137a4833981519152604482015290519081900360640190fd5b611fc684612af4565b5060008481526005602052604080822060078101805474ffffffffffffffffffffffffffffffffffffffff001916610100600160a060020a0389811691820292909217909255600290920154925190938893909216917f62160e4abadfc3a6afc583d10586d737c813753fe64d93f4283282b2b600a34491a450505050565b600054600160a060020a03163314612095576040805160e560020a62461bcd0281526020600482015260096024820152600080516020613804833981519152604482015290519081900360640190fd5b6109398383836133ae565b60006120ac83836118f9565b509392505050565b60075460ff1681565b6000808260018111156120cc57fe5b14156120e9576120e2838563ffffffff6133eb16565b9050612129565b6121268461211a670de0b6b3a764000061210e600654886133eb90919063ffffffff16565b9063ffffffff61342416565b9063ffffffff6133eb16565b90505b9392505050565b60075460ff16158061214c5750600054600160a060020a031633145b1515612190576040805160e560020a62461bcd02815260206004820152600c60248201526000805160206137c4833981519152604482015290519081900360640190fd5b6121a0868686868686600061309a565b505050505050565b60065481565b600354600160a060020a03163314612210576040805160e560020a62461bcd02815260206004820152601260248201527f6572726f725f6e6f745065726d69747465640000000000000000000000000000604482015290519081900360640190fd5b6000811161221d57600080fd5b6006819055604080518381526020810183905281517fc84d758f9836fe65b8f2be13d5e364b9373411e1158b63c1c5abbbae78949609929181900390910190a15050565b600082600061226f82610eb1565b50505050505091505080600160a060020a03166000141515156122ca576040805160e560020a62461bcd02815260206004820152600e60248201526000805160206137e4833981519152604482015290519081900360640190fd5b600160a060020a0381163314806122eb5750600054600160a060020a031633145b151561232f576040805160e560020a62461bcd02815260206004820152601760248201526000805160206137a4833981519152604482015290519081900360640190fd5b61233885612af4565b50600085815260056020526040902080549093501515612390576040805160e560020a62461bcd02815260206004820152600e60248201526000805160206137e4833981519152604482015290519081900360640190fd5b6007830180548515801560a860020a0275ff00000000000000000000000000000000000000000019909216919091179091556123f65760405185907f507847149b655f0d87f5cadd67619cd1c0a53b2cbb153d2f08f83614b4c29b7890600090a2610cc3565b60405185907fd8eb01debfba6841d33231e9b6df615367d622af29059b91eeb39b62f81f79ca90600090a25050505050565b600061243382612af4565b5050600081815260056020526040902080541515612489576040805160e560020a62461bcd02815260206004820152600e60248201526000805160206137e4833981519152604482015290519081900360640190fd5b600781015460a860020a900460ff1615156124ee576040805160e560020a62461bcd02815260206004820152601960248201527f6572726f725f77686974656c6973744e6f74456e61626c656400000000000000604482015290519081900360640190fd5b33600090815260098201602052604081205460ff16600381111561250e57fe5b14612589576040805160e560020a62461bcd02815260206004820152602660248201527f6572726f725f77686974656c69737452657175657374416c726561647953756260448201527f6d69747465640000000000000000000000000000000000000000000000000000606482015290519081900360840190fd5b336000818152600983016020526040808220805460ff191660011790555184917fd07377dfece33da04bb307fc530a0eb06929f31a09309c84ae38079aad7b16a891a35050565b600154600160a060020a031681565b600054600160a060020a0316331461262f576040805160e560020a62461bcd0281526020600482015260096024820152600080516020613804833981519152604482015290519081900360640190fd5b60018054600160a060020a031916600160a060020a0392909216919091179055565b600080600061265e613720565b600061266a8988613447565b506126758988613019565b90955093506001600786015460ff16600181111561268f57fe5b146126e4576040805160e560020a62461bcd02815260206004820152601160248201527f6572726f725f6e6f744465706c6f796564000000000000000000000000000000604482015290519081900360640190fd5b600785015460a860020a900460ff16158061272757506002600160a060020a038816600090815260098701602052604090205460ff16600381111561272557fe5b145b151561277d576040805160e560020a62461bcd02815260206004820152601960248201527f6572726f725f77686974656c6973744e6f74416c6c6f77656400000000000000604482015290519081900360640190fd5b835442101561283b57600088116127de576040805160e560020a62461bcd02815260206004820152601360248201527f6572726f725f746f705570546f6f536d616c6c00000000000000000000000000604482015290519081900360640190fd5b83546127f0908963ffffffff61369016565b8085558554604080518381529051929550600160a060020a038a16927f602ca7f17c81aa5e62b3381000dd445f5af7c333574da85f4b246288afc073229181900360200190a361290f565b6006850154881015612897576040805160e560020a62461bcd02815260206004820152601d60248201527f6572726f725f6e6577537562736372697074696f6e546f6f536d616c6c000000604482015290519081900360640190fd5b6128a7428963ffffffff61369016565b6040805160208181018352838252600160a060020a038b16600081815260088b018352849020835190558954845186815294519598509296509391927f9c3ab7e86c11d820cc311335294ebdf7299d8637d47253b930c4120b775d7cca929081900390910190a35b8454604080518581529051600160a060020a038a1692917fe22e8c2d8a284063fec10f270bc3c776ffb40bcf816b73eef36354d5f3d7b3d4919081900360200190a35060008515612a705760048501546005860154612972918a9160ff166120bd565b6002546003870154604080517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152600160a060020a0392831660248201526044810185905290519394509116916323b872dd916064808201926020929091908290030181600087803b1580156129ee57600080fd5b505af1158015612a02573d6000803e3d6000fd5b505050506040513d6020811015612a1857600080fd5b50511515612a70576040805160e560020a62461bcd02815260206004820152601360248201527f6572726f725f7061796d656e744661696c656400000000000000000000000000604482015290519081900360640190fd5b60038501548454604080517f91517bdd000000000000000000000000000000000000000000000000000000008152600481018d9052600160a060020a038b81166024830152604482019390935260648101859052905191909216916391517bdd916084808301926000929190829003018183875af150505050505050505050505050565b6000818152600560205260408120805460609083908190819081908190819015612b215760009850612e29565b600480546040805160e060020a633a20e9df0281529283018d905251600160a060020a0390911691633a20e9df91602480830192600092919082900301818387803b158015612b6f57600080fd5b505af1158015612b83573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260e0811015612bac57600080fd5b810190808051640100000000811115612bc457600080fd5b82016020810184811115612bd757600080fd5b8151640100000000811182820187101715612bf157600080fd5b5050602082015160408301516060840151608085015160a086015160c090960151949e50929c50909a509850965090945092505050600160a060020a0386161515612c3f5760009850612e29565b8988558651612c579060018a019060208a01906136a2565b50600288018054600160a060020a03808916600160a060020a03199283161790925560038a018054928816929091169190911790556004880184905560058801805484919060ff191660018381811115612cad57fe5b02179055506006880182905560078801805482919060ff191660018381811115612cd357fe5b02179055508760000154600019168860020160009054906101000a9004600160a060020a0316600160a060020a03167fd608cf60e5a08e9db0f10b63c150bb7cdc66ee6286eb04ec5ba01d178e9010d68a6001018b60030160009054906101000a9004600160a060020a03168c600401548d60050160009054906101000a900460ff168e60060154604051808060200186600160a060020a0316600160a060020a03168152602001858152602001846001811115612d8d57fe5b60ff1681526020810184905260408382038101835288546002600182161561010002600019019091160490820181905260609091019088908015612e125780601f10612de757610100808354040283529160200191612e12565b820191906000526020600020905b815481529060010190602001808311612df557829003601f168201915b5050965050505050505060405180910390a3600198505b5050505050505050919050565b60606000806000806000806000612e4b613732565b60008a81526005602090815260409182902082516101408101845281548152600180830180548651600260001994831615610100029490940190911692909204601f8101869004860283018601909652858252919492938581019391929190830182828015612efb5780601f10612ed057610100808354040283529160200191612efb565b820191906000526020600020905b815481529060010190602001808311612ede57829003601f168201915b50505091835250506002820154600160a060020a039081166020830152600383015416604082015260048201546060820152600582015460809091019060ff166001811115612f4657fe5b6001811115612f5157fe5b815260068201546020820152600782015460409091019060ff166001811115612f7657fe5b6001811115612f8157fe5b81526020016007820160019054906101000a9004600160a060020a0316600160a060020a0316600160a060020a031681526020016007820160159054906101000a900460ff161515151581525050905080602001518160400151826060015183608001518460a001518560c001518660e001518761012001518797509850985098509850985098509850985050919395975091939597565b600082815260056020526040812080549091901515613070576040805160e560020a62461bcd02815260206004820152600e60248201526000805160206137e4833981519152604482015290519081900360640190fd5b50600160a060020a03909116600090815260088201602052604090209092909150565b5442111590565b6000808815156130f4576040805160e560020a62461bcd02815260206004820152601360248201527f6572726f725f6e756c6c50726f64756374496400000000000000000000000000604482015290519081900360640190fd5b6000861161314c576040805160e560020a62461bcd02815260206004820152601e60248201527f6572726f725f6672656550726f64756374734e6f74537570706f727465640000604482015290519081900360640190fd5b61315589610eb1565b50505050505092505081600160a060020a031660001415156131c1576040805160e560020a62461bcd02815260206004820152601360248201527f6572726f725f616c726561647945786973747300000000000000000000000000604482015290519081900360640190fd5b506000888152600560209081526040918290208251610140810184528b81529182018a90523392820192909252600160a060020a03881660608201526080810187905260a0810186600181111561321457fe5b81526020810186905260400160018152600060208083018290528615156040938401528c82526005815291902082518155828201518051919261325f926001850192909101906136a2565b506040820151600282018054600160a060020a03928316600160a060020a03199182161790915560608401516003840180549190931691161790556080820151600482015560a082015160058201805460ff1916600183818111156132c057fe5b021790555060c0820151600682015560e082015160078201805460ff1916600183818111156132eb57fe5b0217905550610100828101516007909201805461012090940151151560a860020a0275ff00000000000000000000000000000000000000000019600160a060020a0394851690930274ffffffffffffffffffffffffffffffffffffffff00199095169490941791909116929092179091556040805191891660208301528101879052899033907f397627c8e8e4324a0f8a98a8274c00e4cee798d000625304ffbae6144ec64e54908b908b908b908b908b90806060810184600181111561120857fe5b60038054600160a060020a0319908116600160a060020a039485161790915560028054821694841694909417909355600480549093169116179055565b6000808315156133fe576000915061341d565b5082820282848281151561340e57fe5b041461341957600080fd5b8091505b5092915050565b60008080831161343357600080fd5b828481151561343e57fe5b04949350505050565b60008060008060008061345988612af4565b94506134658888613019565b805491955093501561347a5760009550613685565b84151561357557600480546040805160e060020a633a20e9df0281529283018b905251600160a060020a0390911691633a20e9df91602480830192600092919082900301818387803b1580156134cf57600080fd5b505af11580156134e3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260e081101561350c57600080fd5b81019080805164010000000081111561352457600080fd5b8201602081018481111561353757600080fd5b815164010000000081118282018710171561355157600080fd5b5050506020015193505050600160a060020a03821615156135755760009550613685565b60048054604080517f5f28cb740000000000000000000000000000000000000000000000000000000081529283018b9052600160a060020a038a811660248501528151921692635f28cb7492604480830193928290030181600087803b1580156135de57600080fd5b505af11580156135f2573d6000803e3d6000fd5b505050506040513d604081101561360857600080fd5b5060200151905080151561361f5760009550613685565b6040805160208181018352838252600160a060020a038a16600081815260088901835284902092519092558251848152925191928b927f9a2546e503275a77e7c86606d6512431c9046ffc6d3e53678e2693b201275714929181900390910190a3600195505b505050505092915050565b60008282018381101561341957600080fd5b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106136e357805160ff1916838001178555613710565b82800160010185558215613710579182015b828111156137105782518255916020019190600101906136f5565b5061371c929150613786565b5090565b60408051602081019091526000815290565b604080516101408101825260008082526060602083018190529282018190529181018290526080810182905260a0810182905260c081018290529060e0820190815260006020820181905260409091015290565b6137a091905b8082111561371c576000815560010161378c565b9056006572726f725f70726f647563744f776e6572734f6e6c790000000000000000006572726f725f68616c74656400000000000000000000000000000000000000006572726f725f6e6f74466f756e640000000000000000000000000000000000006f6e6c794f776e65720000000000000000000000000000000000000000000000a165627a7a723058209e6793df32369e0ee5fc8f8f085c1ea32ff91b10ecf824661594c6755edc485d0029",
  "sourceMap": "1824:21908:2:-;;;19604:18;19579:43;;20928:26;;;-1:-1:-1;;20928:26:2;;;4895:223;5:2:-1;;;;30:1;27;20:12;5:2;4895:223:2;;;;;;;;;;;;;;;;;;;;;;;;;566:5:8;:18;;-1:-1:-1;;;;;;566:18:8;574:10;566:18;;;5029:82:2;4895:223;;;5029:11;;;;:82;:::i;:::-;4895:223;;;1824:21908;;5124:301;5259:19;:48;;-1:-1:-1;;;;;;5259:48:2;;;-1:-1:-1;;;;;5259:48:2;;;;;;;5317:8;:33;;;;;;;;;;;;;;5360:16;:58;;;;;;;;;;5124:301::o;1824:21908::-;;;;;;;",
  "deployedSourceMap": "1824:21908:2:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;17819:185;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;17819:185:2;;;;;-1:-1:-1;;;;;17819:185:2;;;;;;;21165:90;;8:9:-1;5:2;;;30:1;27;20:12;5:2;21165:90:2;;;;18279:145;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;18279:145:2;;;;;;;13543:467;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;13543:467:2;;;;;17589:223;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;17589:223:2;;;;;-1:-1:-1;;;;;17589:223:2;;;;;21980:427;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;21980:427:2;;;-1:-1:-1;;;;;21980:427:2;;;;;5613:760;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;5613:760:2;;;;;;;;;;;;;-1:-1:-1;;;;;5613:760:2;-1:-1:-1;;;;;5613:760:2;;;;;;-1:-1:-1;;;;;5613:760:2;-1:-1:-1;;;;;5613:760:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;5613:760:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12142:677;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;12142:677:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;12142:677:2;;-1:-1:-1;;;12142:677:2;;-1:-1:-1;;;;;12142:677:2;;-1:-1:-1;;;12142:677:2;;;;;;;;;;;;-1:-1:-1;12142:677:2;;;;;22413:426;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;22413:426:2;;;-1:-1:-1;;;;;22413:426:2;;;;;1116:226:8;;8:9:-1;5:2;;;30:1;27;20:12;5:2;1116:226:8;;;;14855:162:2;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;14855:162:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23337:391;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;23337:391:2;;;-1:-1:-1;;;;;23337:391:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11696:440;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;11696:440:2;;;;;21074:86;;8:9:-1;5:2;;;30:1;27;20:12;5:2;21074:86:2;;;;14077:772;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;14077:772:2;;;-1:-1:-1;;;;;14077:772:2;;;;;9946:325;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;9946:325:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;9946:325:2;;-1:-1:-1;;;9946:325:2;;-1:-1:-1;;;;;9946:325:2;;-1:-1:-1;;;9946:325:2;;;;;;;;;;;;-1:-1:-1;9946:325:2;;;;;5492:44;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;5492:44:2;;;;;;;;;;;;-1:-1:-1;;;;;5492:44:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;5492:44:2;-1:-1:-1;;;;;5492:44:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;5492:44:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4790:21;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4790:21:2;;;;;;;;-1:-1:-1;;;;;4790:21:2;;;;;;;;;;;;;;4818:34;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4818:34:2;;;;239:20:8;;8:9:-1;5:2;;;30:1;27;20:12;5:2;239:20:8;;;;11215:429:2;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;11215:429:2;;;;;12983:396;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;12983:396:2;;;-1:-1:-1;;;;;12983:396:2;;;;;21261:233;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;21261:233:2;-1:-1:-1;;;;;21261:233:2;;;;;;;;;;;;;;;15109:172;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;15109:172:2;;;-1:-1:-1;;;;;15109:172:2;;;;;;;;;;;;;;;;;;;;;;;20928:26;;8:9:-1;5:2;;;30:1;27;20:12;5:2;20928:26:2;;;;20525:299;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;20525:299:2;;;;;;;;;;;;;;;;;;;;;;;;;;;9662:278;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;9662:278:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;9662:278:2;;-1:-1:-1;;;9662:278:2;;-1:-1:-1;;;;;9662:278:2;;-1:-1:-1;;;9662:278:2;;;;;;;;;;;;-1:-1:-1;9662:278:2;;;;;19579:43;;8:9:-1;5:2;;;30:1;27;20:12;5:2;19579:43:2;;;;19898:262;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;19898:262:2;;;;;;;21531:443;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;21531:443:2;;;;;;;;;22845:486;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;22845:486:2;;;;;265:27:8;;8:9:-1;5:2;;;30:1;27;20:12;5:2;265:27:8;;;;922:102;;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;922:102:8;-1:-1:-1;;;;;922:102:8;;;;;17819:185:2;21005:6;;;;21004:7;;:30;;-1:-1:-1;21015:5:2;;-1:-1:-1;;;;;21015:5:2;21024:10;21015:19;21004:30;20996:55;;;;;;;-1:-1:-1;;;;;20996:55:2;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;20996:55:2;;;;;;;;;;;;;;;17938:59;17949:9;17960:19;17981:9;17992:4;17938:10;:59::i;:::-;17819:185;;;:::o;21165:90::-;732:5:8;;-1:-1:-1;;;;;732:5:8;718:10;:19;710:41;;;;;-1:-1:-1;;;;;710:41:8;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;710:41:8;;;;;;;;;;;;;;;21210:6:2;:14;;-1:-1:-1;;21210:14:2;;;21239:9;;;;21219:5;;21239:9;21165:90::o;18279:145::-;21005:6;;;;21004:7;;:30;;-1:-1:-1;21015:5:2;;-1:-1:-1;;;;;21015:5:2;21024:10;21015:19;21004:30;20996:55;;;;;;;-1:-1:-1;;;;;20996:55:2;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;20996:55:2;;;;;;;;;;;;;;;18368:49;18375:9;18385:19;18406:10;18368:6;:49::i;:::-;18279:145;;:::o;13543:467::-;21005:6;;13757:17;;21005:6;;21004:7;;:30;;-1:-1:-1;21015:5:2;;-1:-1:-1;;;;;21015:5:2;21024:10;21015:19;21004:30;20996:55;;;;;;;-1:-1:-1;;;;;20996:55:2;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;20996:55:2;;;;;;;;;;;;;;;13624:33;13647:9;13624:22;:33::i;:::-;-1:-1:-1;;13777:19:2;;;;:8;:19;;;;;13828;;;;;;;-1:-1:-1;;;;;13828:19:2;13814:10;:33;13806:64;;;;;-1:-1:-1;;;;;13806:64:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;13932:7;;;;13885:55;;-1:-1:-1;;;;;13932:7:2;;;;13921:9;;13909:10;;13885:55;;13932:7;;13885:55;13950:7;;;:20;;-1:-1:-1;;;;;;13950:20:2;13960:10;13950:20;;;13980:19;;:23;;-1:-1:-1;;13980:23:2;;;-1:-1:-1;13543:467:2:o;17589:223::-;21005:6;;;;21004:7;;:30;;-1:-1:-1;21015:5:2;;-1:-1:-1;;;;;21015:5:2;21024:10;21015:19;21004:30;20996:55;;;;;;;-1:-1:-1;;;;;20996:55:2;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;20996:55:2;;;;;;;;;;;;;;;17718:9;7120:14;7144:21;7155:9;7144:10;:21::i;:::-;7118:47;;;;;;;;;7183:6;-1:-1:-1;;;;;7183:13:2;7193:3;7183:13;;7175:40;;;;;;;-1:-1:-1;;;;;7175:40:2;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;7175:40:2;;;;;;;;;;;;;;;-1:-1:-1;;;;;7233:20:2;;7243:10;7233:20;;:43;;-1:-1:-1;7257:5:2;;-1:-1:-1;;;;;7257:5:2;7266:10;7257:19;7233:43;7225:79;;;;;;;-1:-1:-1;;;;;7225:79:2;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;7225:79:2;;;;;;;;;;;;;;;17745:60;17756:9;17767:19;17788:9;17799:5;17745:10;:60::i;:::-;21061:1;;17589:223;;;:::o;21980:427::-;22133:17;22069:9;7120:14;7144:21;7155:9;7144:10;:21::i;:::-;7118:47;;;;;;;;;7183:6;-1:-1:-1;;;;;7183:13:2;7193:3;7183:13;;7175:40;;;;;;;-1:-1:-1;;;;;7175:40:2;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;7175:40:2;;;;;;;;;;;;;;;-1:-1:-1;;;;;7233:20:2;;7243:10;7233:20;;:43;;-1:-1:-1;7257:5:2;;-1:-1:-1;;;;;7257:5:2;7266:10;7257:19;7233:43;7225:79;;;;;;;-1:-1:-1;;;;;7225:79:2;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;7225:79:2;;;;;;;;;;;;;;;22090:33;22113:9;22090:22;:33::i;:::-;-1:-1:-1;22153:19:2;;;;:8;:19;;;;;22190:4;;22153:19;;-1:-1:-1;22190:11:2;;22182:38;;;;;-1:-1:-1;;;;;22182:38:2;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;22182:38:2;;;;;;;;;;;;;;;22238:19;;;;-1:-1:-1;;;22238:19:2;;;;22230:57;;;;;;;-1:-1:-1;;;;;22230:57:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;22297:23:2;;;;;;:11;;;:23;;;;;;:49;;-1:-1:-1;;22297:49:2;22323:23;22297:49;;;22361:39;22379:9;;22361:39;;;21980:427;;;;;:::o;5613:760::-;5666:11;5679:13;5694:19;5715;5736:17;5755:31;5788:18;5808:22;5951:20;5968:2;5951:16;:20::i;:::-;5842:129;;-1:-1:-1;5842:129:2;;-1:-1:-1;5842:129:2;;-1:-1:-1;5842:129:2;;-1:-1:-1;5842:129:2;-1:-1:-1;5842:129:2;-1:-1:-1;5842:129:2;-1:-1:-1;5842:129:2;-1:-1:-1;;;;;;5985:12:2;;;5981:143;;6011:113;;5981:143;6224:16;;;:31;;;-1:-1:-1;;;;;6224:31:2;;;;;;;;;-1:-1:-1;;;;;6224:16:2;;;;:27;;:31;;;;;:16;;:31;;;;;;;:16;;:31;;;5:2:-1;;;;30:1;27;20:12;5:2;6224:31:2;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;6224:31:2;;;;;;39:16:-1;36:1;17:17;2:54;101:4;6224:31:2;80:15:-1;;;-1:-1;;76:31;65:43;;120:4;113:20;13:3;5:12;;2:2;;;30:1;27;20:12;2:2;6224:31:2;;;;;;20:11:-1;15:3;12:20;9:2;;;45:1;42;35:12;9:2;64:21;;126:4;117:14;;142:31;;;139:2;;;186:1;183;176:12;139:2;218:10;;268:11;251:29;;293:43;;;290:58;-1:-1;239:118;236:2;;;370:1;367;360:12;236:2;-1:-1;;6224:31:2;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6224:31:2;;-1:-1:-1;6224:31:2;;-1:-1:-1;6224:31:2;-1:-1:-1;6224:31:2;-1:-1:-1;6224:31:2;;-1:-1:-1;6224:31:2;-1:-1:-1;6360:5:2;;-1:-1:-1;;;5613:760:2;;;;;;;;;;:::o;12142:677::-;12450:17;12315:9;7120:14;7144:21;7155:9;7144:10;:21::i;:::-;7118:47;;;;;;;;;7183:6;-1:-1:-1;;;;;7183:13:2;7193:3;7183:13;;7175:40;;;;;;;-1:-1:-1;;;;;7175:40:2;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;7175:40:2;;;;;;;;;;;;;;;-1:-1:-1;;;;;7233:20:2;;7243:10;7233:20;;:43;;-1:-1:-1;7257:5:2;;-1:-1:-1;;;;;7257:5:2;7266:10;7257:19;7233:43;7225:79;;;;;;;-1:-1:-1;;;;;7225:79:2;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;7225:79:2;;;;;;;;;;;;;;;12361:1;12344:18;;12336:61;;;;;-1:-1:-1;;;;;12336:61:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;12407:33;12430:9;12407:22;:33::i;:::-;-1:-1:-1;12470:19:2;;;;:8;:19;;;;;;;;12499:13;;12470:19;;-1:-1:-1;12499:13:2;;:6;;;;:13;;;;;:::i;:::-;-1:-1:-1;12522:13:2;;;:27;;-1:-1:-1;;;;;;12522:27:2;-1:-1:-1;;;;;12522:27:2;;;;;12559:16;;;:33;;;12602:15;;;:26;;12620:8;;12602:15;-1:-1:-1;;12602:26:2;-1:-1:-1;12620:8:2;12602:26;;;;;;;;;;;;-1:-1:-1;12638:28:2;;;:57;;;12734:4;;12725:7;;;;12710:102;;;-1:-1:-1;;;;;12710:102:2;;;;;;;;;;;;;12725:7;;;12710:102;;12740:4;;12746:11;;12759:14;;12775:8;;12669:26;;12710:102;;;;12775:8;12725:7;12710:102;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:10;8:100;;;90:11;;;84:18;71:11;;;64:39;52:2;45:10;8:100;;;12:14;12710:102:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12142:677;;;;;;;;;:::o;22413:426::-;22565:17;22501:9;7120:14;7144:21;7155:9;7144:10;:21::i;:::-;7118:47;;;;;;;;;7183:6;-1:-1:-1;;;;;7183:13:2;7193:3;7183:13;;7175:40;;;;;;;-1:-1:-1;;;;;7175:40:2;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;7175:40:2;;;;;;;;;;;;;;;-1:-1:-1;;;;;7233:20:2;;7243:10;7233:20;;:43;;-1:-1:-1;7257:5:2;;-1:-1:-1;;;;;7257:5:2;7266:10;7257:19;7233:43;7225:79;;;;;;;-1:-1:-1;;;;;7225:79:2;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;7225:79:2;;;;;;;;;;;;;;;22522:33;22545:9;22522:22;:33::i;:::-;-1:-1:-1;22585:19:2;;;;:8;:19;;;;;22622:4;;22585:19;;-1:-1:-1;22622:11:2;;22614:38;;;;;-1:-1:-1;;;;;22614:38:2;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;22614:38:2;;;;;;;;;;;;;;;22670:19;;;;-1:-1:-1;;;22670:19:2;;;;22662:57;;;;;;;-1:-1:-1;;;;;22662:57:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;22729:23:2;;;;;;:11;;;:23;;;;;;:49;;-1:-1:-1;;22729:49:2;22755:23;22729:49;;;22793:39;22811:9;;22793:39;;;22413:426;;;;;:::o;1116:226:8:-;1181:12;;-1:-1:-1;;;;;1181:12:8;1167:10;:26;1159:55;;;;;-1:-1:-1;;;;;1159:55:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;1257:12;;;1250:5;;1229:41;;-1:-1:-1;;;;;1257:12:8;;;;1250:5;;;;1229:41;;;1288:12;;;;1280:20;;-1:-1:-1;;;;;;1280:20:8;;;-1:-1:-1;;;;;1288:12:8;;1280:20;;;;1310:25;;;1116:226::o;14855:162:2:-;14922:12;14936:17;14972:38;14988:9;14999:10;14972:15;:38::i;:::-;14965:45;;;;14855:162;;;:::o;23337:391::-;23424:22;23460:14;23642:17;23484:21;23495:9;23484:10;:21::i;:::-;23458:47;;;;;;;;;23523:6;-1:-1:-1;;;;;23523:13:2;23533:3;23523:13;;23515:40;;;;;;;-1:-1:-1;;;;;23515:40:2;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;23515:40:2;;;;;;;;;;;;;;;-1:-1:-1;;;23662:19:2;;;;:8;:19;;;;;;;;-1:-1:-1;;;;;23698:23:2;;;;;;:11;;;;:23;;;;;;;;23337:391::o;11696:440::-;11828:17;11764:9;7120:14;7144:21;7155:9;7144:10;:21::i;:::-;7118:47;;;;;;;;;7183:6;-1:-1:-1;;;;;7183:13:2;7193:3;7183:13;;7175:40;;;;;;;-1:-1:-1;;;;;7175:40:2;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;7175:40:2;;;;;;;;;;;;;;;-1:-1:-1;;;;;7233:20:2;;7243:10;7233:20;;:43;;-1:-1:-1;7257:5:2;;-1:-1:-1;;;;;7257:5:2;7266:10;7257:19;7233:43;7225:79;;;;;;;-1:-1:-1;;;;;7225:79:2;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;7225:79:2;;;;;;;;;;;;;;;11785:33;11808:9;11785:22;:33::i;:::-;-1:-1:-1;11848:19:2;;;;:8;:19;;;;;;-1:-1:-1;11885:7:2;;;;;;;:35;;;;;;;;11877:71;;;;;-1:-1:-1;;;;;11877:71:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;11958:7;;;:31;;-1:-1:-1;;11958:31:2;11968:21;11958:31;;;;;;12022:7;;;;12050:13;;;;12065:16;;;;12083:15;;;;12100:28;;;;12004:125;;;-1:-1:-1;;;;;12050:13:2;;;12004:125;;;;;;;;;;;;12031:9;;12022:7;;;;;12004:125;;12042:6;;;;12050:13;;12065:16;;12083:15;;;;;12100:28;12004:125;;;;;;;12083:15;;12004:125;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;12004:125:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11696:440;;;;:::o;21074:86::-;732:5:8;;-1:-1:-1;;;;;732:5:8;718:10;:19;710:41;;;;;-1:-1:-1;;;;;710:41:8;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;710:41:8;;;;;;;;;;;;;;;21117:6:2;:13;;-1:-1:-1;;21117:13:2;21126:4;21117:13;;;21145:8;;;;21117:6;;21145:8;21074:86::o;14077:772::-;14162:12;14176:17;14207:14;14362:33;14602:19;14231:27;14248:9;14231:16;:27::i;:::-;14205:53;;;;;;;;;14271:6;-1:-1:-1;;;;;14271:13:2;14281:3;14271:13;14268:82;;;14294:16;;;:54;;;;;;;;;;;;-1:-1:-1;;;;;14294:54:2;;;;;;;;;:16;;;:32;;:54;;;;;;;;;;;:16;;:54;;;5:2:-1;;;;30:1;27;20:12;5:2;14294:54:2;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;14294:54:2;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;14294:54:2;;;;;;;;;-1:-1:-1;14294:54:2;-1:-1:-1;14287:61:2;;14268:82;14399:44;14421:9;14432:10;14399:21;:44::i;:::-;14456:16;;14359:84;;-1:-1:-1;14456:23:2;14453:340;;-1:-1:-1;14453:340:2;;14630:16;;;:38;;;-1:-1:-1;;;;;14630:38:2;;;;;;;;;-1:-1:-1;;;;;14630:16:2;;;;:27;;:38;;;;;:16;;:38;;;;;;;:16;;:38;;;5:2:-1;;;;30:1;27;20:12;5:2;14630:38:2;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;14630:38:2;;;;;;39:16:-1;36:1;17:17;2:54;101:4;14630:38:2;80:15:-1;;;-1:-1;;76:31;65:43;;120:4;113:20;13:3;5:12;;2:2;;;30:1;27;20:12;2:2;14630:38:2;;;;;;20:11:-1;15:3;12:20;9:2;;;45:1;42;35:12;9:2;64:21;;126:4;117:14;;142:31;;;139:2;;;186:1;183;176:12;139:2;218:10;;268:11;251:29;;293:43;;;290:58;-1:-1;239:118;236:2;;;370:1;367;360:12;236:2;-1:-1;;;14630:38:2;;;;-1:-1:-1;;;;;;;;14685:18:2;;;14682:100;;14728:16;;;:54;;;;;;;;;;;;-1:-1:-1;;;;;14728:54:2;;;;;;;;;:16;;;:32;;:54;;;;;;;;;;;:16;;:54;;;5:2:-1;;;;30:1;27;20:12;14682:100:2;14810:13;14819:3;14810:8;:13::i;:::-;14825:16;;14802:40;;-1:-1:-1;14825:16:2;-1:-1:-1;14077:772:2;;;;;;;;;:::o;9946:325::-;21005:6;;;;21004:7;;:30;;-1:-1:-1;21015:5:2;;-1:-1:-1;;;;;21015:5:2;21024:10;21015:19;21004:30;20996:55;;;;;;;-1:-1:-1;;;;;20996:55:2;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;20996:55:2;;;;;;;;;;;;;;;10132:97;10147:2;10151:4;10157:11;10170:14;10186:8;10196:26;10224:4;10132:14;:97::i;:::-;10244:20;;10261:2;;10244:20;;;;;9946:325;;;;;;:::o;5492:44::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;5492:44:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;5492:44:2;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;5492:44:2;;;;;;;;-1:-1:-1;5492:44:2;;-1:-1:-1;5492:44:2;;;;;;;;;;;;;;;;-1:-1:-1;;;5492:44:2;;;;;:::o;4790:21::-;;;-1:-1:-1;;;;;4790:21:2;;:::o;4818:34::-;;;-1:-1:-1;;;;;4818:34:2;;:::o;239:20:8:-;;;-1:-1:-1;;;;;239:20:8;;:::o;11215:429:2:-;11345:17;11281:9;7120:14;7144:21;7155:9;7144:10;:21::i;:::-;7118:47;;;;;;;;;7183:6;-1:-1:-1;;;;;7183:13:2;7193:3;7183:13;;7175:40;;;;;;;-1:-1:-1;;;;;7175:40:2;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;7175:40:2;;;;;;;;;;;;;;;-1:-1:-1;;;;;7233:20:2;;7243:10;7233:20;;:43;;-1:-1:-1;7257:5:2;;-1:-1:-1;;;;;7257:5:2;7266:10;7257:19;7233:43;7225:79;;;;;;;-1:-1:-1;;;;;7225:79:2;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;7225:79:2;;;;;;;;;;;;;;;11302:33;11325:9;11302:22;:33::i;:::-;-1:-1:-1;11365:19:2;;;;:8;:19;;;;;;-1:-1:-1;11413:21:2;11402:7;;;;;;;:32;;;;;;;;11394:62;;;;;-1:-1:-1;;;;;11394:62:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;11466:7;;;:34;;-1:-1:-1;;11466:34:2;;;11530:7;;;;11558:13;;;;11573:16;;;;11591:15;;;;11608:28;;;;11515:122;;;-1:-1:-1;;;;;11558:13:2;;;11515:122;;;;;;;;;;;;11539:9;;11530:7;;;;;11515:122;;11466:34;11550:6;;;;11558:13;;11573:16;;11591:15;;;11515:122;;;;;;;11591:15;;11515:122;;;;;;12983:396;13084:9;7120:14;7144:21;7155:9;7144:10;:21::i;:::-;7118:47;;;;;;;;;7183:6;-1:-1:-1;;;;;7183:13:2;7193:3;7183:13;;7175:40;;;;;;;-1:-1:-1;;;;;7175:40:2;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;7175:40:2;;;;;;;;;;;;;;;-1:-1:-1;;;;;7233:20:2;;7243:10;7233:20;;:43;;-1:-1:-1;7257:5:2;;-1:-1:-1;;;;;7257:5:2;7266:10;7257:19;7233:43;7225:79;;;;;;;-1:-1:-1;;;;;7225:79:2;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;7225:79:2;;;;;;;;;;;;;;;13105:33;13128:9;13105:22;:33::i;:::-;-1:-1:-1;13220:19:2;;;;:8;:19;;;;;;:37;;;:57;;-1:-1:-1;;13220:57:2;;-1:-1:-1;;;;;13220:57:2;;;;;;;;;;;;;13316:25;;;;;13292:80;;13220:57;;:19;;13316:25;;;;13292:80;;;12983:396;;;;:::o;21261:233::-;732:5:8;;-1:-1:-1;;;;;732:5:8;718:10;:19;710:41;;;;;-1:-1:-1;;;;;710:41:8;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;710:41:8;;;;;;;;;;;;;;;21405:82:2;21417:15;21434:26;21462:24;21405:11;:82::i;15109:172::-;15199:12;15236:38;15252:9;15263:10;15236:15;:38::i;:::-;-1:-1:-1;15223:51:2;15109:172;-1:-1:-1;;;15109:172:2:o;20928:26::-;;;;;;:::o;20525:299::-;20623:19;;20658:4;:21;;;;;;;;;20654:89;;;20702:30;:5;20712:19;20702:30;:9;:30;:::i;:::-;20695:37;;;;20654:89;20759:58;20797:19;20759:33;20785:6;20759:21;20769:10;;20759:5;:9;;:21;;;;:::i;:::-;:25;:33;:25;:33;:::i;:::-;:37;:58;:37;:58;:::i;:::-;20752:65;;20525:299;;;;;;:::o;9662:278::-;21005:6;;;;21004:7;;:30;;-1:-1:-1;21015:5:2;;-1:-1:-1;;;;;21015:5:2;21024:10;21015:19;21004:30;20996:55;;;;;;;-1:-1:-1;;;;;20996:55:2;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;20996:55:2;;;;;;;;;;;;;;;9835:98;9850:2;9854:4;9860:11;9873:14;9889:8;9899:26;9927:5;9835:14;:98::i;:::-;9662:278;;;;;;:::o;19579:43::-;;;;:::o;19898:262::-;19996:19;;-1:-1:-1;;;;;19996:19:2;19982:10;:33;19974:64;;;;;-1:-1:-1;;;;;19974:64:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;20066:1;20056:11;;20048:20;;;;;;20078:10;:20;;;20113:40;;;;;;;;;;;;;;;;;;;;;;;;;19898:262;;:::o;21531:443::-;21693:17;21629:9;7120:14;7144:21;7155:9;7144:10;:21::i;:::-;7118:47;;;;;;;;;7183:6;-1:-1:-1;;;;;7183:13:2;7193:3;7183:13;;7175:40;;;;;;;-1:-1:-1;;;;;7175:40:2;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;7175:40:2;;;;;;;;;;;;;;;-1:-1:-1;;;;;7233:20:2;;7243:10;7233:20;;:43;;-1:-1:-1;7257:5:2;;-1:-1:-1;;;;;7257:5:2;7266:10;7257:19;7233:43;7225:79;;;;;;;-1:-1:-1;;;;;7225:79:2;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;7225:79:2;;;;;;;;;;;;;;;21650:33;21673:9;21650:22;:33::i;:::-;-1:-1:-1;21713:19:2;;;;:8;:19;;;;;21750:4;;21713:19;;-1:-1:-1;21750:11:2;;21742:38;;;;;-1:-1:-1;;;;;21742:38:2;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;21742:38:2;;;;;;;;;;;;;;;21790:19;;;:40;;;;;;-1:-1:-1;;;21790:40:2;-1:-1:-1;;21790:40:2;;;;;;;;;;21840:127;;21880:27;;21897:9;;21880:27;;;;;21840:127;;;21939:28;;21957:9;;21939:28;;;;;21531:443;;;;;:::o;22845:486::-;22950:17;22907:33;22930:9;22907:22;:33::i;:::-;-1:-1:-1;;22970:19:2;;;;:8;:19;;;;;23007:4;;:11;;22999:38;;;;;-1:-1:-1;;;;;22999:38:2;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;22999:38:2;;;;;;;;;;;;;;;23055:19;;;;-1:-1:-1;;;23055:19:2;;;;23047:57;;;;;;;-1:-1:-1;;;;;23047:57:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;23134:10;23149:19;23122:23;;;:11;;;:23;;;;;;;;:46;;;;;;;;;23114:97;;;;;-1:-1:-1;;;;;23114:97:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23233:10;23221:23;;;;:11;;;:23;;;;;;:48;;-1:-1:-1;;23221:48:2;23247:22;23221:48;;;23284:40;23303:9;;23284:40;;;22845:486;;:::o;265:27:8:-;;;-1:-1:-1;;;;;265:27:8;;:::o;922:102::-;732:5;;-1:-1:-1;;;;;732:5:8;718:10;:19;710:41;;;;;-1:-1:-1;;;;;710:41:8;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;710:41:8;;;;;;;;;;;;;;;994:12;:23;;-1:-1:-1;;;;;;994:23:8;-1:-1:-1;;;;;994:23:8;;;;;;;;;;922:102::o;15400:2183:2:-;15577:17;15596:36;15884:17;16386:35;;:::i;:::-;16652:10;15516:50;15544:9;15555:10;15516:27;:50::i;:::-;;15636:44;15658:9;15669:10;15636:21;:44::i;:::-;15576:104;;-1:-1:-1;15576:104:2;-1:-1:-1;15709:21:2;15698:7;;;;;;;:32;;;;;;;;15690:62;;;;;-1:-1:-1;;;;;15690:62:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;15771:19;;;;-1:-1:-1;;;15771:19:2;;;;15770:20;;:74;;-1:-1:-1;15821:23:2;-1:-1:-1;;;;;15794:23:2;;;;;;:11;;;:23;;;;;;;;:50;;;;;;;;;15770:74;15762:112;;;;;;;-1:-1:-1;;;;;15762:112:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;15915:19;;15937:15;-1:-1:-1;15911:675:2;;;15989:1;15976:14;;15968:46;;;;;-1:-1:-1;;;;;15968:46:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;16043:19;;:35;;16067:10;16043:35;:23;:35;:::i;:::-;16092:34;;;16166:4;;16145:52;;;;;;;;16028:50;;-1:-1:-1;;;;;;16145:52:2;;;;;;;;;;;;15911:675;;;16250:28;;;;16236:42;;;16228:84;;;;;-1:-1:-1;;;;;16228:84:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;16341:31;:15;16361:10;16341:31;:19;:31;:::i;:::-;16424:35;;;;;;;;;;;;-1:-1:-1;;;;;16473:27:2;;-1:-1:-1;16473:27:2;;;:15;;;:27;;;;;:36;;;;16544:4;;16528:47;;;;;;;16326:46;;-1:-1:-1;16424:35:2;;-1:-1:-1;16473:27:2;16544:4;;16528:47;;;;;;;;;;;15911:675;16611:4;;16600:42;;;;;;;;-1:-1:-1;;;;;16600:42:2;;;16611:4;16600:42;;;;;;;;;;-1:-1:-1;16665:1:2;16676:214;;;;16744:16;;;;16762:15;;;;16717:61;;16732:10;;16762:15;;16717:14;:61::i;:::-;16800:8;;16834:13;;;;16800:55;;;;;;16822:10;16800:55;;;;-1:-1:-1;;;;;16834:13:2;;;16800:55;;;;;;;;;;;;16709:69;;-1:-1:-1;16800:8:2;;;:21;;:55;;;;;;;;;;;;;;;:8;;:55;;;5:2:-1;;;;30:1;27;20:12;5:2;16800:55:2;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;16800:55:2;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;16800:55:2;16792:87;;;;;;;-1:-1:-1;;;;;16792:87:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;17495:13;;;;17549:19;;17495:81;;;;;;;;;;;;-1:-1:-1;;;;;17495:81:2;;;;;;;;;;;;;;;;;;;;;;:13;;;;;17514:10;;17495:81;;;;;:13;;:81;;;;;;;:13;;:81;;-1:-1:-1;;;;;;;;;;;;;15400:2183:2:o;7432:929::-;7501:13;7545:19;;;:8;:19;;;;;7577:4;;7625:19;;7501:13;;;;;;;;;;;;7577:11;7574:40;;7609:5;7602:12;;;;7574:40;7816:16;;;:38;;;-1:-1:-1;;;;;7816:38:2;;;;;;;;;-1:-1:-1;;;;;7816:16:2;;;;:27;;:38;;;;;:16;;:38;;;;;;;:16;;:38;;;5:2:-1;;;;30:1;27;20:12;5:2;7816:38:2;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;7816:38:2;;;;;;39:16:-1;36:1;17:17;2:54;101:4;7816:38:2;80:15:-1;;;-1:-1;;76:31;65:43;;120:4;113:20;13:3;5:12;;2:2;;;30:1;27;20:12;2:2;7816:38:2;;;;;;20:11:-1;15:3;12:20;9:2;;;45:1;42;35:12;9:2;64:21;;126:4;117:14;;142:31;;;139:2;;;186:1;183;176:12;139:2;218:10;;268:11;251:29;;293:43;;;290:58;-1:-1;239:118;236:2;;;370:1;367;360:12;236:2;-1:-1;;7816:38:2;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;7816:38:2;;-1:-1:-1;7816:38:2;;-1:-1:-1;7816:38:2;-1:-1:-1;7816:38:2;-1:-1:-1;7816:38:2;;-1:-1:-1;7816:38:2;-1:-1:-1;;;;;;;;7867:13:2;;;7864:42;;;7901:5;7894:12;;;;7864:42;7916:16;;;7942:14;;;;:6;;;;:14;;;;;:::i;:::-;-1:-1:-1;7966:7:2;;;:16;;-1:-1:-1;;;;;7966:16:2;;;-1:-1:-1;;;;;;7966:16:2;;;;;;;7992:13;;;:28;;;;;;;;;;;;;;;8030:16;;;:34;;;8074:15;;;:32;;8092:14;;8074:15;-1:-1:-1;;8074:32:2;7966:16;8092:14;8074:32;;;;;;;;;;;;-1:-1:-1;8116:28:2;;;:58;;;8184:7;;;:16;;8194:6;;8184:7;-1:-1:-1;;8184:16:2;;8194:6;8184:16;;;;;;;;;;;;;8240:1;:4;;;8215:118;;;8231:1;:7;;;;;;;;;;-1:-1:-1;;;;;8231:7:2;-1:-1:-1;;;;;8215:118:2;;8246:1;:6;;8254:1;:13;;;;;;;;;;-1:-1:-1;;;;;8254:13:2;8269:1;:16;;;8287:1;:15;;;;;;;;;;;;8304:1;:28;;;8215:118;;;;;;;-1:-1:-1;;;;;8215:118:2;-1:-1:-1;;;;;8215:118:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;8215:118:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8350:4;8343:11;;7432:929;;;;;;;;;;;;:::o;6459:525::-;6520:11;6533:13;6548:19;6569;6590:17;6609:31;6642:18;6662:22;6696:16;;:::i;:::-;6715:12;;;;:8;:12;;;;;;;;;6696:31;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;6696:31:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6715:12;;6696:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;6696:31:2;;;-1:-1:-1;;6696:31:2;;;;-1:-1:-1;;;;;6696:31:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;6696:31:2;-1:-1:-1;;;;;6696:31:2;-1:-1:-1;;;;;6696:31:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;6758:1;:6;;;6778:1;:7;;;6799:1;:13;;;6826:1;:16;;;6856:1;:15;;;6885:1;:28;;;6927:1;:7;;;6948:1;:19;;;6737:240;;;;;;;;;;;;;;;;;;;6459:525;;;;;;;;;;:::o;18526:274::-;18619:17;18685:19;;;:8;:19;;;;;18722:4;;18685:19;;18619:17;18722:11;;18714:38;;;;;-1:-1:-1;;;;;18714:38:2;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;18714:38:2;;;;;;;;;;;;;;;-1:-1:-1;;;;;;18766:27:2;;;;;;;:15;;;:27;;;;;:1;;:27;;-1:-1:-1;18526:274:2:o;18806:137::-;18903:14;18921:15;-1:-1:-1;18903:33:2;;18806:137::o;10278:884::-;10588:14;;10472:9;;;10464:41;;;;;-1:-1:-1;;;;;10464:41:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;10540:1;10523:18;;10515:61;;;;;-1:-1:-1;;;;;10515:61:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;10612:14;10623:2;10612:10;:14::i;:::-;10586:40;;;;;;;;;10644:6;-1:-1:-1;;;;;10644:13:2;10654:3;10644:13;10636:45;;;;;;;-1:-1:-1;;;;;10636:45:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;10711:12:2;;;;:8;:12;;;;;;;;;10748:289;;;;;;;;;;;;;;;;10784:10;10748:289;;;;;;;-1:-1:-1;;;;;10748:289:2;;;;;;;;;;;;;;;10881:8;10748:289;;;;;;;;;;;;;;;;;;10954:21;10748:289;;10996:1;10748:289;;;;;;;;;;;;;;;10733:12;;;:8;:12;;;;;:304;;;;;;;;;;:12;;:304;;;;;;;;;;;:::i;:::-;-1:-1:-1;10733:304:2;;;;;;;;;-1:-1:-1;;;;;10733:304:2;;;-1:-1:-1;;;;;;10733:304:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;10733:304:2;;;;;;;;;;;;;;;-1:-1:-1;10733:304:2;;;;;;;;;;;;;;;;;-1:-1:-1;;10733:304:2;;;;;;;;;;;;;;;-1:-1:-1;10733:304:2;;;;;;;;;;;;;;;;;;-1:-1:-1;;;10733:304:2;-1:-1:-1;;;;;;;10733:304:2;;;;;;-1:-1:-1;;10733:304:2;;;;;;;;;;;;;;;;;;11052:103;;;;;;;;;;;;;;;11079:2;;11067:10;;11052:103;;11083:4;;11089:11;;11102:14;;11118:8;;11128:26;;11052:103;;;;11118:8;10733:304;11052:103;;;;;;5124:301;5259:19;:48;;-1:-1:-1;;;;;;5259:48:2;;;-1:-1:-1;;;;;5259:48:2;;;;;;;5317:8;:33;;;;;;;;;;;;;;5360:16;:58;;;;;;;;;;5124:301::o;204:381:14:-;262:7;;486:6;;482:35;;;509:1;502:8;;;;482:35;-1:-1:-1;535:5:14;;;539:1;535;:5;554;;;;;;;;:10;546:19;;;;;;579:1;572:8;;204:381;;;;;;:::o;695:270::-;753:7;;776:5;;;768:14;;;;;;862:1;858;:5;;;;;;;;;695:270;-1:-1:-1;;;;695:270:14:o;8367:1290:2:-;8461:13;8486:21;8634:23;8659:33;9202:19;9345:18;8510:33;8533:9;8510:22;:33::i;:::-;8486:57;;8696:44;8718:9;8729:10;8696:21;:44::i;:::-;8754:16;;8633:107;;-1:-1:-1;8633:107:2;-1:-1:-1;8754:23:2;8750:46;;8788:5;8781:12;;;;8750:46;9169:16;9168:17;9165:168;;;9230:16;;;:38;;;-1:-1:-1;;;;;9230:38:2;;;;;;;;;-1:-1:-1;;;;;9230:16:2;;;;:27;;:38;;;;;:16;;:38;;;;;;;:16;;:38;;;5:2:-1;;;;30:1;27;20:12;5:2;9230:38:2;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;9230:38:2;;;;;;39:16:-1;36:1;17:17;2:54;101:4;9230:38:2;80:15:-1;;;-1:-1;;76:31;65:43;;120:4;113:20;13:3;5:12;;2:2;;;30:1;27;20:12;2:2;9230:38:2;;;;;;20:11:-1;15:3;12:20;9:2;;;45:1;42;35:12;9:2;64:21;;126:4;117:14;;142:31;;;139:2;;;186:1;183;176:12;139:2;218:10;;268:11;251:29;;293:43;;;290:58;-1:-1;239:118;236:2;;;370:1;367;360:12;236:2;-1:-1;;;9230:38:2;;;;-1:-1:-1;;;;;;;;9286:18:2;;;9282:41;;;9315:5;9308:12;;;;9282:41;9367:16;;;:55;;;;;;;;;;;;-1:-1:-1;;;;;9367:55:2;;;;;;;;;:16;;;:32;;:55;;;;;;;;;;;:16;;:55;;;5:2:-1;;;;30:1;27;20:12;5:2;9367:55:2;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;9367:55:2;;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;9367:55:2;;;;-1:-1:-1;9436:20:2;;9432:43;;;9467:5;9460:12;;;;9432:43;9520:36;;;;;;;;;;;;-1:-1:-1;;;;;9484:33:2;;-1:-1:-1;9484:33:2;;;:21;;;:33;;;;;:72;;;;;9571:58;;;;;;;9484:33;;9592:9;;9571:58;;;;;;;;;;;9646:4;9639:11;;8367:1290;;;;;;;;;;:::o;1272:131:14:-;1330:7;1357:5;;;1376:6;;;;1368:15;;;;;1824:21908:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1824:21908:2;;;-1:-1:-1;1824:21908:2;:::i;:::-;;;:::o;:::-;;;;;;;;;;-1:-1:-1;1824:21908:2;;;:::o;:::-;;;;;;;;;-1:-1:-1;1824:21908:2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;:::o",
  "source": "// solhint-disable not-rely-on-time\npragma solidity ^0.4.25;\n\nimport \"openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\";\nimport \"openzeppelin-solidity/contracts/math/SafeMath.sol\";\n\nimport \"./PurchaseListener.sol\";\nimport \"./Ownable.sol\";\n\n\ncontract IMarketplace {\n    enum ProductState {\n        NotDeployed,                // non-existent or deleted\n        Deployed                    // created or redeployed\n    }\n\n    enum Currency {\n        DATA,                       // \"token wei\" (10^-18 DATA)\n        USD                         // attodollars (10^-18 USD)\n    }\n\n    enum WhitelistState{\n        None,\n        Pending,\n        Approved,\n        Rejected\n    }\n    function getSubscription(bytes32 productId, address subscriber) public view returns (bool isValid, uint endTimestamp) {}\n    function getPriceInData(uint subscriptionSeconds, uint price, Currency unit) public view returns (uint datacoinAmount) {}\n}\ncontract IMarketplace1 is IMarketplace{\n    function getProduct(bytes32 id) public view returns (string name, address owner, address beneficiary, uint pricePerSecond, Currency currency, uint minimumSubscriptionSeconds, ProductState state) {}\n}\ncontract IMarketplace2 is IMarketplace{\n    function getProduct(bytes32 id) public view returns (string name, address owner, address beneficiary, uint pricePerSecond, Currency currency, uint minimumSubscriptionSeconds, ProductState state, bool requiresWhitelist) {}\n    function buyFor(bytes32 productId, uint subscriptionSeconds, address recipient) public {}\n}\n/**\n * @title Streamr Marketplace\n * @dev note about numbers:\n *   All prices and exchange rates are in \"decimal fixed-point\", that is, scaled by 10^18, like ETH vs wei.\n *  Seconds are integers as usual.\n *\n * Next version TODO:\n *  - EIP-165 inferface definition; PurchaseListener\n */\ncontract Marketplace is Ownable, IMarketplace2 {\n    using SafeMath for uint256;\n\n    // product events\n    event ProductCreated(address indexed owner, bytes32 indexed id, string name, address beneficiary, uint pricePerSecond, Currency currency, uint minimumSubscriptionSeconds);\n    event ProductUpdated(address indexed owner, bytes32 indexed id, string name, address beneficiary, uint pricePerSecond, Currency currency, uint minimumSubscriptionSeconds);\n    event ProductDeleted(address indexed owner, bytes32 indexed id, string name, address beneficiary, uint pricePerSecond, Currency currency, uint minimumSubscriptionSeconds);\n    event ProductImported(address indexed owner, bytes32 indexed id, string name, address beneficiary, uint pricePerSecond, Currency currency, uint minimumSubscriptionSeconds);\n    event ProductRedeployed(address indexed owner, bytes32 indexed id, string name, address beneficiary, uint pricePerSecond, Currency currency, uint minimumSubscriptionSeconds);\n    event ProductOwnershipOffered(address indexed owner, bytes32 indexed id, address indexed to);\n    event ProductOwnershipChanged(address indexed newOwner, bytes32 indexed id, address indexed oldOwner);\n\n    // subscription events\n    event Subscribed(bytes32 indexed productId, address indexed subscriber, uint endTimestamp);\n    event NewSubscription(bytes32 indexed productId, address indexed subscriber, uint endTimestamp);\n    event SubscriptionExtended(bytes32 indexed productId, address indexed subscriber, uint endTimestamp);\n    event SubscriptionImported(bytes32 indexed productId, address indexed subscriber, uint endTimestamp);\n    event SubscriptionTransferred(bytes32 indexed productId, address indexed from, address indexed to, uint secondsTransferred);\n\n    // currency events\n    event ExchangeRatesUpdated(uint timestamp, uint dataInUsd);\n\n    // whitelist events\n    event WhitelistRequested(bytes32 indexed productId, address indexed subscriber);\n    event WhitelistApproved(bytes32 indexed productId, address indexed subscriber);\n    event WhitelistRejected(bytes32 indexed productId, address indexed subscriber);\n    event WhitelistEnabled(bytes32 indexed productId);\n    event WhitelistDisabled(bytes32 indexed productId);\n\n\n\n    struct Product {\n        bytes32 id;\n        string name;\n        address owner;\n        address beneficiary;        // account where revenue is directed to\n        uint pricePerSecond;\n        Currency priceCurrency;\n        uint minimumSubscriptionSeconds;\n        ProductState state;\n        address newOwnerCandidate;  // Two phase hand-over to minimize the chance that the product ownership is lost to a non-existent address.\n        bool requiresWhitelist;\n        mapping(address => TimeBasedSubscription) subscriptions;\n        mapping(address => WhitelistState) whitelist;\n    }\n\n    struct TimeBasedSubscription {\n        uint endTimestamp;\n    }\n\n    /////////////// Marketplace lifecycle /////////////////\n\n    ERC20 public datacoin;\n\n    address public currencyUpdateAgent;\n    IMarketplace1 prev_marketplace;\n\n    constructor(address datacoinAddress, address currencyUpdateAgentAddress, address prev_marketplace_address) Ownable() public {\n        _initialize(datacoinAddress, currencyUpdateAgentAddress, prev_marketplace_address);\n    }\n\n    function _initialize(address datacoinAddress, address currencyUpdateAgentAddress, address prev_marketplace_address) internal {\n        currencyUpdateAgent = currencyUpdateAgentAddress;\n        datacoin = ERC20(datacoinAddress);\n        prev_marketplace = IMarketplace1(prev_marketplace_address);\n    }\n\n    ////////////////// Product management /////////////////\n\n    mapping (bytes32 => Product) public products;\n    /*\n        checks this marketplace first, then the previous\n    */\n    function getProduct(bytes32 id) public view returns (string name, address owner, address beneficiary, uint pricePerSecond, Currency currency, uint minimumSubscriptionSeconds, ProductState state, bool requiresWhitelist) {\n        (name, owner, beneficiary, pricePerSecond, currency, minimumSubscriptionSeconds, state, requiresWhitelist) = _getProductLocal(id);\n        if (owner != 0x0)\n            return (name, owner, beneficiary, pricePerSecond, currency, minimumSubscriptionSeconds, state, requiresWhitelist);\n        (name, owner, beneficiary, pricePerSecond, currency, minimumSubscriptionSeconds, state) = prev_marketplace.getProduct(id);\n        return (name, owner, beneficiary, pricePerSecond, currency, minimumSubscriptionSeconds, state, false);\n    }\n\n    /**\n    checks only this marketplace, not the previous marketplace\n     */\n\n    function _getProductLocal(bytes32 id) internal view returns (string name, address owner, address beneficiary, uint pricePerSecond, Currency currency, uint minimumSubscriptionSeconds, ProductState state, bool requiresWhitelist) {\n        Product memory p = products[id];\n        return (\n            p.name,\n            p.owner,\n            p.beneficiary,\n            p.pricePerSecond,\n            p.priceCurrency,\n            p.minimumSubscriptionSeconds,\n            p.state,\n            p.requiresWhitelist\n        );\n    }\n\n    // also checks that p exists: p.owner == 0 for non-existent products\n    modifier onlyProductOwner(bytes32 productId) {\n        (,address _owner,,,,,,) = getProduct(productId);\n        require(_owner != 0x0, \"error_notFound\");\n        require(_owner == msg.sender || owner == msg.sender, \"error_productOwnersOnly\");\n        _;\n    }\n\n    /**\n     * Imports product details (but NOT subscription details) from previous marketplace\n     */\n    function _importProductIfNeeded(bytes32 productId) internal returns (bool imported){\n        Product storage p = products[productId];\n        if(p.id != 0x0)\n            return false;\n        (string memory _name, address _owner, address _beneficiary, uint _pricePerSecond, IMarketplace1.Currency _priceCurrency, uint _minimumSubscriptionSeconds, IMarketplace1.ProductState _state) = prev_marketplace.getProduct(productId);\n        if(_owner == 0x0)\n            return false;\n        p.id = productId;\n        p.name = _name;\n        p.owner = _owner;\n        p.beneficiary = _beneficiary;\n        p.pricePerSecond = _pricePerSecond;\n        p.priceCurrency = _priceCurrency;\n        p.minimumSubscriptionSeconds = _minimumSubscriptionSeconds;\n        p.state = _state;\n        emit ProductImported(p.owner, p.id, p.name, p.beneficiary, p.pricePerSecond, p.priceCurrency, p.minimumSubscriptionSeconds);\n        return true;\n    }\n\n    function _importSubscriptionIfNeeded(bytes32 productId, address subscriber) internal returns (bool imported) {\n        bool _productImported = _importProductIfNeeded(productId);\n\n        // check that subscription didn't already exist in current marketplace\n        (Product storage product, TimeBasedSubscription storage sub) = _getSubscriptionLocal(productId, subscriber);\n        if (sub.endTimestamp != 0x0) { return false; }\n\n        // check that subscription exists in the previous marketplace(s)\n        // only call prev_marketplace.getSubscription() if product exists there\n        // consider e.g. product created in current marketplace but subscription still doesn't exist\n        // if _productImported, it must have existed in previous marketplace so no need to perform check\n        if(!_productImported){\n            (,address _owner_prev,,,,,) = prev_marketplace.getProduct(productId);\n            if (_owner_prev == 0x0) { return false; }\n        }\n        (, uint _endTimestamp) = prev_marketplace.getSubscription(productId, subscriber);\n        if (_endTimestamp == 0x0) { return false; }\n        product.subscriptions[subscriber] = TimeBasedSubscription(_endTimestamp);\n        emit SubscriptionImported(productId, subscriber, _endTimestamp);\n        return true;\n    }\n    function createProduct(bytes32 id, string name, address beneficiary, uint pricePerSecond, Currency currency, uint minimumSubscriptionSeconds) public whenNotHalted {\n        _createProduct(id, name, beneficiary, pricePerSecond, currency, minimumSubscriptionSeconds, false);\n    }\n\n    function createProductWithWhitelist(bytes32 id, string name, address beneficiary, uint pricePerSecond, Currency currency, uint minimumSubscriptionSeconds) public whenNotHalted {\n        _createProduct(id, name, beneficiary, pricePerSecond, currency, minimumSubscriptionSeconds, true);\n        emit WhitelistEnabled(id);\n    }\n\n\n    function _createProduct(bytes32 id, string name, address beneficiary, uint pricePerSecond, Currency currency, uint minimumSubscriptionSeconds, bool requiresWhitelist) internal {\n        require(id != 0x0, \"error_nullProductId\");\n        require(pricePerSecond > 0, \"error_freeProductsNotSupported\");\n        (,address _owner,,,,,,) = getProduct(id);\n        require(_owner == 0x0, \"error_alreadyExists\");\n        Product storage p = products[id];\n        products[id] = Product({id: id, name: name, owner: msg.sender, beneficiary: beneficiary, pricePerSecond: pricePerSecond,\n            priceCurrency: currency, minimumSubscriptionSeconds: minimumSubscriptionSeconds, state: ProductState.Deployed, newOwnerCandidate: 0, requiresWhitelist: requiresWhitelist});\n        emit ProductCreated(msg.sender, id, name, beneficiary, pricePerSecond, currency, minimumSubscriptionSeconds);\n    }\n\n    /**\n    * Stop offering the product\n    */\n    function deleteProduct(bytes32 productId) public onlyProductOwner(productId) {\n        _importProductIfNeeded(productId);\n        Product storage p = products[productId];\n        require(p.state == ProductState.Deployed, \"error_notDeployed\");\n        p.state = ProductState.NotDeployed;\n        emit ProductDeleted(p.owner, productId, p.name, p.beneficiary, p.pricePerSecond, p.priceCurrency, p.minimumSubscriptionSeconds);\n    }\n\n    /**\n    * Return product to market\n    */\n    function redeployProduct(bytes32 productId) public onlyProductOwner(productId) {\n        _importProductIfNeeded(productId);\n        Product storage p = products[productId];\n        require(p.state == ProductState.NotDeployed, \"error_mustBeNotDeployed\");\n        p.state = ProductState.Deployed;\n        emit ProductRedeployed(p.owner, productId, p.name, p.beneficiary, p.pricePerSecond, p.priceCurrency, p.minimumSubscriptionSeconds);\n    }\n\n    function updateProduct(bytes32 productId, string name, address beneficiary, uint pricePerSecond, Currency currency, uint minimumSubscriptionSeconds) public onlyProductOwner(productId) {\n        require(pricePerSecond > 0, \"error_freeProductsNotSupported\");\n        _importProductIfNeeded(productId);\n        Product storage p = products[productId];\n        p.name = name;\n        p.beneficiary = beneficiary;\n        p.pricePerSecond = pricePerSecond;\n        p.priceCurrency = currency;\n        p.minimumSubscriptionSeconds = minimumSubscriptionSeconds;\n        emit ProductUpdated(p.owner, p.id, name, beneficiary, pricePerSecond, currency, minimumSubscriptionSeconds);\n    }\n\n    /**\n    * Changes ownership of the product. Two phase hand-over minimizes the chance that the product ownership is lost to a non-existent address.\n    */\n    function offerProductOwnership(bytes32 productId, address newOwnerCandidate) public onlyProductOwner(productId) {\n        _importProductIfNeeded(productId);\n        // that productId exists is already checked in onlyProductOwner\n        products[productId].newOwnerCandidate = newOwnerCandidate;\n        emit ProductOwnershipOffered(products[productId].owner, productId, newOwnerCandidate);\n    }\n\n    /**\n    * Changes ownership of the product. Two phase hand-over minimizes the chance that the product ownership is lost to a non-existent address.\n    */\n    function claimProductOwnership(bytes32 productId) public whenNotHalted {\n        _importProductIfNeeded(productId);\n        // also checks that productId exists (newOwnerCandidate is zero for non-existent)\n        Product storage p = products[productId];\n        require(msg.sender == p.newOwnerCandidate, \"error_notPermitted\");\n        emit ProductOwnershipChanged(msg.sender, productId, p.owner);\n        p.owner = msg.sender;\n        p.newOwnerCandidate = 0;\n    }\n\n    /////////////// Subscription management ///////////////\n\n    function getSubscription(bytes32 productId, address subscriber) public view returns (bool isValid, uint endTimestamp) {\n        (,address _owner,,,,,,) = _getProductLocal(productId);\n        if(_owner == 0x0){ return prev_marketplace.getSubscription(productId,subscriber);}\n        (, TimeBasedSubscription storage sub) = _getSubscriptionLocal(productId, subscriber);\n        if(sub.endTimestamp == 0x0){\n            // only call prev_marketplace.getSubscription() if product exists in previous marketplace too\n            (,address _owner_prev,,,,,) = prev_marketplace.getProduct(productId);\n            if(_owner_prev != 0x0)\n                return prev_marketplace.getSubscription(productId,subscriber);\n        }\n        return (_isValid(sub), sub.endTimestamp);\n    }\n\n    function getSubscriptionTo(bytes32 productId) public view returns (bool isValid, uint endTimestamp) {\n        return getSubscription(productId, msg.sender);\n    }\n\n    /**\n     * Checks if the given address currently has a valid subscription\n     */\n    function hasValidSubscription(bytes32 productId, address subscriber) public view returns (bool isValid) {\n        (isValid,) = getSubscription(productId, subscriber);\n    }\n    /**\n    _subscribe invokes _addSubscription, enforces payment rules, triggers PurchaseListener event\n     */\n\n    function _subscribe(bytes32 productId, uint addSeconds, address subscriber, bool requirePayment) internal {\n        _importSubscriptionIfNeeded(productId, subscriber);\n        (Product storage p, TimeBasedSubscription storage oldSub) = _getSubscriptionLocal(productId, subscriber);\n        require(p.state == ProductState.Deployed, \"error_notDeployed\");\n        require(!p.requiresWhitelist || p.whitelist[subscriber] == WhitelistState.Approved, \"error_whitelistNotAllowed\");\n        uint endTimestamp;\n        if (oldSub.endTimestamp > block.timestamp) {\n            require(addSeconds > 0, \"error_topUpTooSmall\");\n            endTimestamp = oldSub.endTimestamp.add(addSeconds);\n            oldSub.endTimestamp = endTimestamp;\n            emit SubscriptionExtended(p.id, subscriber, endTimestamp);\n        } else {\n            require(addSeconds >= p.minimumSubscriptionSeconds, \"error_newSubscriptionTooSmall\");\n            endTimestamp = block.timestamp.add(addSeconds);\n            TimeBasedSubscription memory newSub = TimeBasedSubscription(endTimestamp);\n            p.subscriptions[subscriber] = newSub;\n            emit NewSubscription(p.id, subscriber, endTimestamp);\n        }\n        emit Subscribed(p.id, subscriber, endTimestamp);\n        uint price = 0;\n        if (requirePayment){\n            price = getPriceInData(addSeconds, p.pricePerSecond, p.priceCurrency);\n            require(datacoin.transferFrom(msg.sender, p.beneficiary, price), \"error_paymentFailed\");\n        }\n\n        // Solidity 5:\n        //(bool success, bytes memory returnData) = p.beneficiary.call(abi.encodeWithSignature(\"onPurchase(bytes32,address,uint256,uint256)\", productId, subscriber, oldSub.endTimestamp, price));\n        // TODO: check returnData if onPurchase returned true (accept purchase) or false (reject purchase)\n        // TODO: require(purchaseAccepted, \"error_rejectedBySeller\")\n\n        // Solidity 4:\n        // 0x91517bdd = keccak256(\"onPurchase(bytes32,address,uint256,uint256)\")\n        // this call returns true if beneficiary is a PurchaseListener, return value is ignored\n        p.beneficiary.call(0x91517bdd, productId, subscriber, oldSub.endTimestamp, price);\n    }\n\n    function grantSubscription(bytes32 productId, uint subscriptionSeconds, address recipient) public whenNotHalted onlyProductOwner(productId){\n        return _subscribe(productId, subscriptionSeconds, recipient, false);\n    }\n\n\n    function buyFor(bytes32 productId, uint subscriptionSeconds, address recipient)  public whenNotHalted {\n        return _subscribe(productId, subscriptionSeconds, recipient, true);\n    }\n\n\n     /**\n     * Purchases access to this stream for msg.sender.\n     * If the address already has a valid subscription, extends the subscription by the given period.\n     * @dev since v4.0: Notify the seller if the seller implements PurchaseListener interface\n     */\n    function buy(bytes32 productId, uint subscriptionSeconds) public whenNotHalted {\n        buyFor(productId,subscriptionSeconds, msg.sender);\n    }\n\n\n    /**\n        gets subscriptions info from the subscriptions stored in this contract\n     */\n    function _getSubscriptionLocal(bytes32 productId, address subscriber) internal view returns (Product storage p, TimeBasedSubscription storage s) {\n        p = products[productId];\n        require(p.id != 0x0, \"error_notFound\");\n        s = p.subscriptions[subscriber];\n    }\n\n    function _isValid(TimeBasedSubscription storage s) internal view returns (bool) {\n        return s.endTimestamp >= block.timestamp;\n    }\n\n    // TODO: transfer allowance to another Marketplace contract\n    // Mechanism basically is that this Marketplace draws from the allowance and credits\n    //   the account on another Marketplace; OR that there is a central credit pool (say, an ERC20 token)\n    // Creating another ERC20 token for this could be a simple fix: it would need the ability to transfer allowances\n\n    /////////////// Currency management ///////////////\n\n    // Exchange rates are formatted as \"decimal fixed-point\", that is, scaled by 10^18, like ether.\n    //        Exponent: 10^18 15 12  9  6  3  0\n    //                      |  |  |  |  |  |  |\n    uint public dataPerUsd = 100000000000000000;   // ~= 0.1 DATA/USD\n\n    /**\n    * Update currency exchange rates; all purchases are still billed in DATAcoin\n    * @param timestamp in seconds when the exchange rates were last updated\n    * @param dataUsd how many data atoms (10^-18 DATA) equal one USD dollar\n    */\n    function updateExchangeRates(uint timestamp, uint dataUsd) public {\n        require(msg.sender == currencyUpdateAgent, \"error_notPermitted\");\n        require(dataUsd > 0);\n        dataPerUsd = dataUsd;\n        emit ExchangeRatesUpdated(timestamp, dataUsd);\n    }\n\n    /**\n    * Helper function to calculate (hypothetical) subscription cost for given seconds and price, using current exchange rates.\n    * @param subscriptionSeconds length of hypothetical subscription, as a non-scaled integer\n    * @param price nominal price scaled by 10^18 (\"token wei\" or \"attodollars\")\n    * @param unit unit of the number price\n    */\n    function getPriceInData(uint subscriptionSeconds, uint price, Currency unit) public view returns (uint datacoinAmount) {\n        if (unit == Currency.DATA) {\n            return price.mul(subscriptionSeconds);\n        }\n        return price.mul(dataPerUsd).div(10**18).mul(subscriptionSeconds);\n    }\n\n    /////////////// Admin functionality ///////////////\n\n    event Halted();\n    event Resumed();\n    bool public halted = false;\n\n    modifier whenNotHalted() {\n        require(!halted || owner == msg.sender, \"error_halted\");\n        _;\n    }\n    function halt() public onlyOwner {\n        halted = true;\n        emit Halted();\n    }\n    function resume() public onlyOwner {\n        halted = false;\n        emit Resumed();\n    }\n\n    function reInitialize(address datacoinAddress, address currencyUpdateAgentAddress, address prev_marketplace_address) public onlyOwner {\n        _initialize(datacoinAddress, currencyUpdateAgentAddress, prev_marketplace_address);\n    }\n\n    //whitelist functionality\n\n    function setRequiresWhitelist(bytes32 productId, bool _requiresWhitelist) public onlyProductOwner(productId) {\n        _importProductIfNeeded(productId);\n        Product storage p = products[productId];\n        require(p.id != 0x0, \"error_notFound\");\n        p.requiresWhitelist = _requiresWhitelist;\n        if(_requiresWhitelist)\n            emit WhitelistEnabled(productId);\n        else\n            emit WhitelistDisabled(productId);\n    }\n\n    function whitelistApprove(bytes32 productId, address subscriber) public onlyProductOwner(productId) {\n        _importProductIfNeeded(productId);\n        Product storage p = products[productId];\n        require(p.id != 0x0, \"error_notFound\");\n        require(p.requiresWhitelist, \"error_whitelistNotEnabled\");\n        p.whitelist[subscriber] = WhitelistState.Approved;\n        emit WhitelistApproved(productId,subscriber);\n    }\n\n    function whitelistReject(bytes32 productId, address subscriber) public onlyProductOwner(productId) {\n        _importProductIfNeeded(productId);\n        Product storage p = products[productId];\n        require(p.id != 0x0, \"error_notFound\");\n        require(p.requiresWhitelist, \"error_whitelistNotEnabled\");\n        p.whitelist[subscriber] = WhitelistState.Rejected;\n        emit WhitelistRejected(productId,subscriber);\n    }\n\n    function whitelistRequest(bytes32 productId) public {\n        _importProductIfNeeded(productId);\n        Product storage p = products[productId];\n        require(p.id != 0x0, \"error_notFound\");\n        require(p.requiresWhitelist, \"error_whitelistNotEnabled\");\n        require(p.whitelist[msg.sender] == WhitelistState.None, \"error_whitelistRequestAlreadySubmitted\");\n        p.whitelist[msg.sender] = WhitelistState.Pending;\n        emit WhitelistRequested(productId,msg.sender);\n    }\n\n    function getWhitelistState(bytes32 productId, address subscriber) public view returns (WhitelistState wlstate) {\n        (,address _owner,,,,,,) = getProduct(productId);\n        require(_owner != 0x0, \"error_notFound\");\n        //if it's not local this will return 0, which is WhitelistState.None\n        Product storage p = products[productId];\n        return p.whitelist[subscriber];\n    }\n\n\n}\n"
}